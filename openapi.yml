openapi: "3.0.3"
info:
  title: "MyLittleShopping API"
  version: 0.0.1
  basePath: "/api"
  tags:
    - name: "user"
      description: "Access to user accounts data"
    - name: "product"
      description: "Access to products data"
  schemes:
    - "https"
    - "http"
paths:
  /user/disable:
    post:
      security:
        - bearerAuth: []
      description: "Disable the account"
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required:
                - password
              properties:
                password:
                  type: string
      responses:
        200:
          description: "Account disabled"
        401:
          description: "Unauthorized"
  /user/login:
    post:
      description: "Log In"
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required:
                - email
                - password
              properties:
                email:
                  type: string
                password:
                  type: string
      responses:
        200:
          description: "Logged In"
        400:
          description: "Malformed request"
        401:
          description: "Bad credentials"
  /user/register:
    post:
      description: "Sign In"
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required:
                - firstname
                - lastname
                - birthdate
                - email
                - password
              properties:
                firstname:
                  type: string
                lastname:
                  type: string
                birthdate:
                  type: string
                email:
                  type: string
                password:
                  type: string
      responses:
        201:
          description: "Signed In"
        400:
          description: "Malformed request"
        409:
          description: "Email already used"
  /user:
    get:
      security:
        - bearerAuth: []
      description: "List all users"
      parameters:
        - in: query
          name: offset
          schema:
            type: integer
          description: "The number of users to skip before starting collecting the result set"
        - in: query
          name: limit
          schema:
            type: integer
          description: "The number of users to return"
      responses:
        200:
          description: "List of users"
          schema:
          type: "array"
          items:
            $ref: "#/definitions/User"
        400:
          description: "Bad request"
        401:
          description: "Unauthorized"
  /user/{id}:
    get:
      security:
        - bearerAuth: []
      description: "Get user information"
      responses:
        200:
          description: "Return user information"
          schema:
            $ref: "#/definitions/User"
        401:
          description: "Unauthorized"
  /user/{}/state:
    put:
      security:
        - bearerAuth: []
      description: "Switch state of the user (disabled or enabled)"
      responses:
        200:
          description: "Changed state"
        401:
          description: "Unauthorized"
  /product/{name}:
    get:
      description: "Get data of a specific product retrieved by name"
      responses:
        200:
          description: "Returned product informations"
          schema:
            $ref: "#/definitions/Product"
        400:
          description: "Bad request"
  /product/{category}:
    get:
      description: "Get data of a specific product retrieved by category"
      responses:
        200:
          description: "Returned product informations"
          schema:
            $ref: "#/definitions/Product"
        400:
          description: "Bad request"
  /product/{tag}:
    get:
      description: "Get data of a specific product retrieved by tag"
      responses:
        200:
          description: "Returned product informations"
          schema:
            $ref: "#/definitions/Product"
        400:
          description: "Bad request"
  /product:
    post:
      security:
        - bearerAuth: []
      description: "Add a product to the e-shop catalog"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/definitions/Product"
      responses:
        201:
          description: "Product added"
        400:
          description: "Bad request"
        401:
          description: "Unauthorized"
    put:
      security:
        - bearerAuth: []
      description: "Allow a seller to update a product saved in the e-shop catalog"
      content:
        application/json:
          schema:
            $ref: "#/definitions/Product"
    responses:
      200:
        description: "Product updated"
      400:
        description: "Bad request"
      401:
        description: "Unauthorized"
  product/products/{condition}:
    get:
      description: "Get a list of products from the e-shop catalog according to their condition"
      responses:
        200:
          description: "Returned products informations"
          schema:
            type: "array"
            items:
            $ref: "#/definitions/Product"
        400:
          description: "Bad request"
  product/products/{low_price}-{high_price}:
    get:
      description: "Get a list of products from the e-shop catalog according to a price range"
      parameters:
        - in: query
          name: low_price
          schema:
            type: number
            format: currency
          description: "The minimal price for the filtered products"
        - in: query
          name: high_price
          schema:
            type: number
            format: currency
          description: "The maximal price for the filtered products"
          responses:
            200:
              description: "Returned products informations"
              schema:
                type: "array"
                items:
                $ref: "#/definitions/Product"
            400:
              description: "Bad request"
  product/products/{seller_id}:
    get:
      security:
        - bearerAuth: []
      description: "Get a list of products from the e-shop catalog according to the seller who owns the products"
      parameters:
        - in: "query"
          name: "seller_id"
          schema:
            type: "number"
            description: "The id of the seller"
      responses:
        200:
          description: "List of seller products"
          schema:
          type: "array"
          items:
            $ref: "#/definitions/Product"
        400:
          description: "Bad request"
        401:
          description: "Unauthorized"
  product/cart/{user_id}:
    get:
      security:
        - bearerAuth: []
      description: "Allow a user to get access to his owned cart data"
      parameters:
        - in: query
          name: user_id
          schema:
            type: "integer"
      responses:
        200:
          description: "Owner cart data"
          schema:
            $ref: "#/definitions/Cart"
        400:
          description: "Bad request"
        401:
          description: "Unauthorized"
        404:
          description: "No cart found"
    put:
      security:
        - bearerAuth: []
      description: "Allow a user to update his owned cart"
      parameters:
        - in: "query"
          name: "user_id"
          schema:
            type: "integer"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/definitions/Cart"
      responses:
        200:
          description: "Cart updated"
          schema:
            $ref: "#/definitions/Cart"
        400:
          description: "Bad request"
        401:
          description: "Unauthorized"
  /orders/product/{product_id}/{timestamp1}-{timestamp2}:
    get:
      security:
        - bearerAuth: []
      description: "Allow a seller to retrieve data concerning the sales of their products over a time range"
      parameters:
        - in: "query"
          name: "product_id"
          schema:
            type: "number"
          description: "The id of the seller product"
        - in: "query"
          name: "timestamp1"
          schema:
            type: "number"
            format: "date-time"
          description: "The youngest timestamp range of the query"
        - in: "query"
          name: "timestamp2"
          schema:
            type: "number"
            format: "date-time"
          description: "The youngest timestamp range of the query"
      responses:
        200:
          description: "List of seller products orders"
          schema:
          type: "array"
          items:
            $ref: "#/definitions/Order"
        400:
          description: "Bad request"
        401:
          description: "Unauthorized"
  /orders/order{cart_id}:
    post:
      security:
        - bearerAuth: []
      description: "Allow a user to validate his cart which create an order"
      parameters:
        - in: "query"
          name: "cart_id"
          schema:
            type: "number"
          description: "id of the user cart"
      responses:
        201:
          description: "Delivery created"
          items:
            $ref: "#/definitions/Order"
        400:
          description: "Bad request"
        401:
          description: "Unauthorized"
  /orders/deliveries{}-{}:
    get:
      security:
        - bearerAuth: []
      description: "Get a list of deliveries handled by the sellers"
      parameters:
        - in: query
          name: offset
          schema:
            type: integer
          description: "The number of deliveries to skip before starting collecting the result set"
        - in: query
          name: limit
          schema:
            type: integer
          description: "The number of deliveries to return"
      responses:
        200:
          description: "List of deliveries"
          schema:
          type: "array"
          items:
            $ref: "#/definitions/Delivery"
        400:
          description: "Bad request"
        401:
          description: "Unauthorized"
  /orders/delivery{payment_id}:
    post:
      security:
        - bearerAuth: []
      description: "Allows the creation of a delivery if payment has been made"
      parameters:
        - in: "query"
          name: "payment_id"
          schema:
            type: "number"
          description: "id of the payment"
      responses:
        201:
          description: "Delivery created"
          items:
            $ref: "#/definitions/Delivery"
        400:
          description: "Bad request"
        401:
          description: "Unauthorized"
        402:
          description: "Payment required"
  /orders/delivery/{uid}:
    get:
      description: "Allows a buyer to get data from a specific delivery according to a delivery number"
      responses:
        200:
          description: "Returned delivery informations"
          parameters:
            - in: query
              name: uid
          schema:
          $ref: "#/definitions/Delivery"
        400:
          description: "Bad request"

definitions:
  Cart:
    type: "object"
    properties:
      id:
        type: "integer"
        format: "int64"
      user_id:
        type: "integer"
        schema:
        $ref: "#/definitions/User"
      product_id:
        type: "integer"
        schema:
        $ref: "#/definitions/Product"
      quantity:
        type: "integer"
        format: "int64"
      created_at:
        type: "date-time"
      modified_at:
        type: "date-time"

  Order:
    type: "object"
    properties:
      id:
        type: "integer"
        format: "int64"
      user_id:
        type: "integer"
        schema:
        $ref: "#/definitions/User"
      cart_id:
        type: "integer"
        schema:
        $ref: "#/definitions/Cart"
      value:
        type: "integer"
        format: "currency"
      created_at:
        type: "date-time"
      modified_at:
        type: "date-time"

  UserAddress:
    type: object
    properties:
      id:
        type: "integer"
        format: "int64"
      user_id:
        type: "integer"
        schema:
        $ref: "#/definitions/User"
      address1:
        type: "string"
      address2:
        type: "string"
      address3:
        type: "string"
      city:
        type: "string"
      state:
        type: "string"
      country:
        type: "string"
      postalCode:
        type: "integer"
        format: "int32"

  Delivery:
    type: "object"
    properties:
      id:
        type: "integer"
        format: "int64"
      uid:
        type: "string"
      order_id:
        type: "integer"
        schema:
        $ref: "#/definitions/Order"
      status:
        type: "string"
        description: "State of the delivery"
        enum:
          - "preparation"
          - "sent"
          - "received"
      user_address_id:
        type: "integer"
        schema:
        $ref: "#/definitions/UserAddress"
      expedition_date:
        type: "date-time"

  User:
    type: "object"
    properties:
      id:
        type: "integer"
        format: "int64"
      firstname:
        type: "string"
      lastname:
        type: "string"
      password:
        type: "string"
      birthdate:
        type: "date"
      role:
        type: "string"
        description: "Role of a user"
        enum:
          - "buyer"
          - "seller"
          - "admin"
      created_at:
        type: "date-time"
      modified_at:
        type: "date-time"

  Product:
    type: "object"
    properties:
      id:
        type: "integer"
        format: "int64"
      name:
        type: "string"
      label:
        type: "string"
      condition:
        type: "string"
        description: "Condition of a product"
        enum:
          - "new"
          - "occasion"
          - "renovated"
      description:
        type: string
      unit_price:
        type: number
        format: currency
      available_quantity:
        type: "integer"
        format: "int64"

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
